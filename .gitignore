import tkinter as tk
from tkinter import messagebox

# Function to solve the matrix using Gaussian elimination
def solve_matrix():
    try:
        # Get the matrix size (number of equations)
        size = int(size_entry.get())
        if size <= 0:
            raise ValueError("Matrix size must be a positive number.")

        # Read the coefficient matrix
        matrix = []
        for i in range(size):
            row = [float(matrix_entries[i][j].get()) for j in range(size)]
            matrix.append(row)

        # Read the constant terms
        constants = [float(constants_entries[i].get()) for i in range(size)]

        # Solve the system
        solution = gaussian_elimination(matrix, constants)
        display_solution(solution)
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Gaussian elimination method
def gaussian_elimination(matrix, constants):
    n = len(matrix)

    # Forward elimination
    for i in range(n):
        # Ensure the pivot is not zero
        pivot = matrix[i][i]
        if pivot == 0:
            raise ValueError("Matrix cannot be solved (singular or invalid).")

        # Normalize the current row
        for j in range(i, n):
            matrix[i][j] /= pivot
        constants[i] /= pivot

        # Eliminate rows below the current row
        for k in range(i + 1, n):
            factor = matrix[k][i]
            for j in range(i, n):
                matrix[k][j] -= factor * matrix[i][j]
            constants[k] -= factor * constants[i]

    # Back substitution to find the solution
    solution = [0] * n
    for i in range(n - 1, -1, -1):
        solution[i] = constants[i] - sum(matrix[i][j] * solution[j] for j in range(i + 1, n))
    return solution

# Display the solution in a message box
def display_solution(solution):
    result = "\n".join(f"x{i + 1} = {value:.2f}" for i, value in enumerate(solution))
    messagebox.showinfo("Solution", result)

# Create the input fields for the matrix and constants
def create_input_fields():
    try:
        # Clear existing input fields
        for widget in matrix_frame.winfo_children():
            widget.destroy()
        for widget in constants_frame.winfo_children():
            widget.destroy()
        matrix_entries.clear()
        constants_entries.clear()

        # Get the size of the matrix
        size = int(size_entry.get())
        if size <= 0:
            raise ValueError("Matrix size must be a positive number.")

        # Create fields for the coefficient matrix
        for i in range(size):
            row_entries = []
            for j in range(size):
                entry = tk.Entry(matrix_frame, width=5)
                entry.grid(row=i, column=j, padx=5, pady=5)
                row_entries.append(entry)
            matrix_entries.append(row_entries)

        # Create fields for the constants
        for i in range(size):
            entry = tk.Entry(constants_frame, width=5)
            entry.grid(row=i, column=0, padx=5, pady=5)
            constants_entries.append(entry)
    except ValueError as e:
        messagebox.showerror("Error", str(e))

# GUI Setup
root = tk.Tk()
root.title("Matrix Solver")

# Input for matrix size
size_frame = tk.Frame(root)
size_frame.pack(pady=10)
tk.Label(size_frame, text="Matrix Size (e.g., 3 for 3x3):").pack(side=tk.LEFT)
size_entry = tk.Entry(size_frame, width=5)
size_entry.pack(side=tk.LEFT)

# Button to generate input fields
generate_button = tk.Button(root, text="Generate Fields", command=create_input_fields)
generate_button.pack(pady=10)

# Frames for matrix and constants input
matrix_frame = tk.Frame(root)
matrix_frame.pack(pady=10)
tk.Label(matrix_frame, text="Matrix Coefficients:").pack()

constants_frame = tk.Frame(root)
constants_frame.pack(pady=10)
tk.Label(constants_frame, text="Constants:").pack()

# Button to solve the equations
solve_button = tk.Button(root, text="Solve", command=solve_matrix)
solve_button.pack(pady=10)

# Storage for dynamically created input fields
matrix_entries = []
constants_entries = []

# Run the application
root.mainloop()
